%META:TOPICPARENT{name="Plugins"}%
---+ !SemanticLinks Plugin

%SHORTDESCRIPTION%

%TOC%

---++ PreferenceSettings
Rendering of links is enabled by default, but can add unwanted CPU overhead. You may wish to disable the rendering by default (in %USERSWEB%.SitePreferences), and then only enable on webs where it's needed in these web's %WEBPREFSTOPIC% topics.
<verbatim class="tml">
   * Set SEMANTICLINKSPLUGIN_RENDERING = on
</verbatim>

---++ %SYSTEMWEB%.QuerySearch backlinks
When %TOPIC% is enabled, topics are saved with =META:LINK= %SYSTEMWEB%.MetaData containing (almost) all links contained in the topic content. The schema is as follows:
   * type: ==META:LINK==
   * alias: =links=
   * keys:
      * =name= - numeric index, in order of appearance in the topic content
      * =address= - the (absolute) path in the link
      * =scope= - internal or external
      * =type= - autolink, semantic or bracket
      * =web=, =topic= - for links of internal scope only

---+++ Notes
   * %TOPIC% avoids duplicate addresses appearing in ==META:LINK==.
   * %TOPIC% tries to capture links that would normally be rendered by Foswiki, including WikiWords and ACRONYM topics.
   * %TOPIC% expands non-parameterised [[PreferenceSettings][preferences variables]] _only_ (I.E. [[Macros]] are ignored) before storing the link address. For example, on this topic, a link to =%<nop>WEB%.%<nop>TOPIC%= will be stored as =%WEB%.%TOPIC%=.

---+++ Example MetaData
<verbatim class="tml">
WebPreferences (or %WEBPREFSTOPIC%) produces:
   * %META:LINK{name="1" scope="internal" type="autolink" web="System" topic="WebPreferences"   address="System.WebPreferences"}%
[[PreyOf::Snakes]] produces:
   * %META:LINK{name="2" scope="internal" type="semantic" web="System" topic="Snakes"           address="System.Snakes"}%
[[SemanticIsPartOf]] produces:
   * %META:LINK{name="3" scope="internal" type="bracket"  web="System" topic="SemanticIsPartOf" address="System.SemanticIsPartOf"}%
http://foswiki.org/Support/SemanticLinksPlugin produces:
   * %META:LINK{name="4" scope="external" type="autolink" address="http://foswiki.org/Support/SemanticLinksPlugin"}%
[[http://www.w3.org/RDF/Validator/]] produces:
   * %META:LINK{name="5" scope="external" type="bracket"  address="http://www.w3.org/RDF/Validator/"}%
</verbatim>
---+++ Example backlinks SEARCH
<verbatim class="tml">%SEARCH{
  "links[address='%WEB%.%TOPIC%']"
  type="query"
  web="%SYSTEMWEB%"
  header="Topics that link to %WEB%.%TOPIC%:"
}%</verbatim>
---+++ Example list of links _out_ on a topic
<verbatim class="tml"><noautolink>
   * Links to other topics: %FORMAT{
      "%QUERY{"links[scope='internal'].name"}%"
      type="string"
      header="$n"
      format="      * =$percntQUERY{\"links[name='$item'].address\"}$percnt= - $percntQUERY{\"links[name='$item'].type\"}$percnt link"
   }%
   * External links: %FORMAT{
      "%QUERY{"links[scope='external'].name"}%"
      type="string"
      header="$n"
      format="      * =$percntQUERY{\"links[name='$item'].address\"}$percnt= - $percntQUERY{\"links[name='$item'].type\"}$percnt link"
   }%
</noautolink></verbatim>
Preview:
<noautolink>
   * Links to other topics: %FORMAT{
      "%QUERY{"links[scope='internal'].name"}%"
      type="string"
      header="$n"
      format="      * =$percntQUERY{\"links[name='$item'].address\"}$percnt= - $percntQUERY{\"links[name='$item'].type\"}$percnt link"
   }%
   * External links: %FORMAT{
      "%QUERY{"links[scope='external'].name"}%"
      type="string"
      header="$n"
      format="      * =$percntQUERY{\"links[name='$item'].address\"}$percnt= - $percntQUERY{\"links[name='$item'].type\"}$percnt link"
   }%
</noautolink>
---++ Semantic links - syntax
Use the following link syntax to create a special 'semantic' link. Semantic links are rendered using templates (see [[#Templates]]) but also populate special metadata (=META:SLPROPERTY=, see [[#Meta_Data]]).
%STARTSECTION{"TopicSyntax"}% 
| *Note*        | *Example*                                                                       | *Preview*                                      | *#*                       | *Should get* |
| Semantic link | <verbatim class="tml">[[IsPartOf::UserDocumentationCategory]]</verbatim>        | [[IsPartOf::UserDocumentationCategory]]        | <!-- Sem.             --> |              |
| Semantic link with Foswiki-style link text \
                | <verbatim class="tml">[[IsPartOf::UserDocumentationCategory][docs]]</verbatim>  | [[IsPartOf::UserDocumentationCategory][docs]]  | <!-- Sem. text        --> |              |
| Semantic link with SMW-style link text \
                | <verbatim class="tml">[[IsPartOf::UserDocumentationCategory|docs]]</verbatim>   | [[IsPartOf::UserDocumentationCategory|docs]]   | <!-- Sem-SMW text     --> |              |
| Non-semantic link \
                | <verbatim class="tml">[[:IsPartOf::UserDocumentationCategory][docs]]</verbatim> | [[:IsPartOf::UserDocumentationCategory][docs]] | <!-- Std. text        --> |              |
%ENDSECTION{"TopicSyntax"}%
<!-- %STARTSECTION{"UnsupportedSyntax"}%<verbatim class="tml">
| | <verbatim class="tml">![[IsPartOf::UserDocumentationCategory|docs]]</verbatim>       | ![[IsPartOf::UserDocumentationCategory|docs]]           | <!-- ^Sem-SMW text    --> | |
| | <verbatim class="tml">[<nop>[IsPartOf::UserDocumentationCategory|docs]]</verbatim>   | [<nop>[IsPartOf::UserDocumentationCategory|docs]]       | <!-- Sem-SMW text nop --> | |
| | <verbatim class="tml">[[:IsPartOf::UserDocumentationCategory|docs]]</verbatim>       | [[:IsPartOf::UserDocumentationCategory|docs]]           | <!-- Std-SMW text     --> | |
| | <verbatim class="tml">![[:IsPartOf::UserDocumentationCategory|docs]]</verbatim>      | ![[:IsPartOf::SemanticFlie|docs]]                       | <!-- ^Std-SMW text    --> | |
| | <verbatim class="tml">[<nop>[:IsPartOf::UserDocumentationCategory|docs]]</verbatim>  | [<nop>[:IsPartOf::UserDocumentationCategory|docs]]      | <!-- Std-SMW text nop --> | |
| | <verbatim class="tml">[[:IsPartOf::UserDocumentationCategory|docs::misc]]</verbatim> | [[:IsPartOf::UserDocumentationCategory|docs::misc]]     | <!-- Std-SMW::text    --> | |
%ENDSECTION{"UnsupportedSyntax"}%%STARTSECTION{"BoringSyntax"}%
| | <verbatim class="tml">![[IsPartOf::UserDocumentationCategory]]</verbatim>            | ![[IsPartOf::UserDocumentationCategory]]                | <!-- ^Sem.             --> | |
| | <verbatim class="tml">[<nop>[IsPartOf::UserDocumentationCategory]]</verbatim>        | [<nop>[IsPartOf::UserDocumentationCategory]]            | <!-- Sem. nop          --> | |
| | <verbatim class="tml">![[IsPartOf::UserDocumentationCategory][docs]]</verbatim>      | ![[IsPartOf::UserDocumentationCategory][docs]]          | <!-- ^Sem. text        --> | |
| | <verbatim class="tml">[<nop>[IsPartOf::UserDocumentationCategory][docs]]</verbatim>  | [<nop>[IsPartOf::UserDocumentationCategory][docs]]      | <!-- Sem. text nop     --> | |
| | <verbatim class="tml">[[IsPartOf::UserDocumentationCategory][docs::misc]]</verbatim> | [[IsPartOf::UserDocumentationCategory][docs::misc]]     | <!-- Sem::text         --> | |
| | <verbatim class="tml">[[IsPartOf::UserDocumentationCategory|docs::misc]]</verbatim>  | [[IsPartOf::UserDocumentationCategory|docs::misc]]      | <!-- Sem-SMW::text     --> | |
| | <verbatim class="tml">![[:IsPartOf::UserDocumentationCategory]]</verbatim>           | ![[:IsPartOf::UserDocumentationCategory]]               | <!-- ^Std.             --> | |
| | <verbatim class="tml">[<nop>[:IsPartOf::UserDocumentationCategory]]</verbatim>       | [<nop>[:IsPartOf::UserDocumentationCategory]]           | <!-- Std. nop          --> | |
| | <verbatim class="tml">![[:IsPartOf::UserDocumentationCategory][docs]]</verbatim>     | ![[:IsPartOf::UserDocumentationCategory][docs]]         | <!-- ^Std. text        --> | |
| | <verbatim class="tml">[<nop>[:IsPartOf::UserDocumentationCategory][docs]]</verbatim> | [<nop>[:IsPartOf::UserDocumentationCategory][docs]]     | <!-- Std. text nop     --> | |
| | <verbatim class="tml">[[:IsPartOf][docs::misc]]</verbatim>                           | [[:IsPartOf][docs::misc]]                               | <!-- Std::text         --> | |
</verbatim>%ENDSECTION{"BoringSyntax"}% -->

---++ Templates
When rendering a link, %TOPIC% travels a slightly different skin path to that of the [[SkinTemplates#Finding_Skin_Templates][standard templates path]]. The path used, and the name of the DEFs that are loaded are based on the _property_ name used in the semantic link. The order looks like this:
   1 First, use the [[SkinTemplates#Finding_Skin_Templates][standard skin path]] to get DEFs named in the form of =SemanticLinksPlugin::PROPERTYNAME::Link=. This gives skin templates a chance to target only links using a specific property name. You might do this if your RDF needs to use multiple ontologies, or you can't easily transform property names consistently into RDF.
   1 If the property name matches the name of a topic that exists, load template directives from it and try DEFs named of the form:
      1 =SemanticLinksPlugin::%<nop>SEMANTICLINKSPLUGIN_TMPL%::Link=, where =SEMANTICLINKSPLUGIN_TMPL= is either a [[VarURLPARAM][URL parameter]] or [[PreferenceSettings][PreferenceSetting]].
      1 =SemanticLinksPlugin::Link=
   1 Finally, use the [[SkinTemplates#Finding_Skin_Templates][standard skin path]] to find DEFs named in the form of =SemanticLinksPlugin::Link=. Unless you override them with your own skin or AutoViewTemplatePlugin templates, these will come from =templates/semanticlinksplugin.tmpl=.

---+++ DEFs
| *TMPL:DEF{...}*                             | *Description*                                                            |
| =SemanticLinksPlugin::Link=                 | Build markup for an =[<nop>[ordinary::link]]=                            |
| =SemanticLinksPlugin::LinkWithtext=         | Build markup for a =[<nop>[link::with][text]]=                         |
| =SemanticLinksPlugin::MissingLink=          | Build markup for an =[<nop>[ordinary::link]]= to a non-existant topic    |
| =SemanticLinksPlugin::MissingLinkWithtext=  | Build markup for a =[<nop>[link::with][text]]= to a non-existant topic |

---+++ Tokens
Given a link of the form:
<verbatim class="tml">[[Example.Property::UserDocumentationCategory?query=part#AnchorPart][Example text]]</verbatim>
Preview:
<blockquote>[[Example.Property::UserDocumentationCategory?query=part#AnchorPart][Example text]]</blockquote>
These tokens apply:
| *Token*            | *Example*                       | *Description*                  |
| =$text=            | Example text                    | text part of the link          |
| =$property=        | !Example.Property               | Property part (LHS of '::')    |
| =$property(web)=   | !Example                        | Web part of the property       |
| =$property(topic)= | !Property                       | Topic part of the property     |
| =$property(seq)=   | 3                               | Values are counted against properties, starting from 1. Property name + sequence no. forms the unique name for each =META:SLVALUE=. Same as =META:SLVALUE.propertyseq= |
| =$value=           | !System.UserDocumentationCategory?query=part#AnchorPart \
                                                       | Value part (RHS of '::')       |
| =$value(web)=      | !System                         | Web part of the value          |
| =$value(topic)=    | !UserDocumentationCategory      | Topic part of the value        |
| =$value(query)=    | query=part                      | Query part of the value        |
| =$value(qquery)=   | ?query=part                     | Query part, prefixed with '?'  |
| =$value(anchor)=   | !AnchorPart                     | Anchor part of the value       |
| =$value(aanchor)=  | #AnchorPart                     | Anchor part, prefixed with '#' |

---+++ Example: Default DEFs overridden from property topic
In accordance with the template path rules described above, the link below will be rendered using the =SemanticLinksPlugin::LinkWithText= =TMPL:DEF= contained within [[System.SemanticIsPartOf]].

<verbatim class="tml">[[SemanticIsPartOf::UserDocumentationCategory?query=something#anchor][Example text]]</verbatim>
Preview:
<blockquote>[[%SYSTEMWEB%.SemanticIsPartOf::%SYSTEMWEB%.UserDocumentationCategory?query=something#anchor][Example text]]</blockquote>

---+++ Example: RDF output using named template from property topic
=SemanticLinksPlugin::MyRDF::LinkWithText= used from the property topic
<!-- %STARTSECTION{"myrdfdemo"}%<?xml version="1.0"?>
<rdf:RDF \
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" \
    xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#" \
    xmlns:dct="http://purl.org/dc/terms/1.1/" \
    xmlns:dc="http://purl.org/dc/elements/1.1/" \
    xmlns:dcq="http://purl.org/dc/qualifiers/1.1/">
    <rdf:Description rdf:about="%TOPICURL%">
        <dc:Title><literal>%TOPIC%</literal></dc:Title>
        <dc:Creator>%SEARCH{"1" type="query" topic="%TOPIC%" nonoise="on" format="$createwikiname"}%</dc:Creator>
        <dc:Type>Text.Article</dc:Type>
        <dc:Format>text/html</dc:Format>
        [[System.SemanticIsPartOf::System.UserDocumentationCategory][User documentation]]
    </rdf:Description>
</rdf:RDF>%ENDSECTION{"myrdfdemo"}% -->
<verbatim class="tml">[[System.SemanticIsPartOf::System.UserDocumentationCategory][User documentation]]</verbatim>
Previews:
   * Best viewed in Firefox:
      * [[%TOPIC%?contenttype=application/xml+rdf;skin=text;SEMANTICLINKSPLUGIN_TMPL=MyRDF;section=myrdfdemo][_Click to see RDF view_]]
   * Alternate:
      * [[%TOPIC%?contenttype=text/plain;skin=text;SEMANTICLINKSPLUGIN_TMPL=MyRDF;section=myrdfdemo][_Click to see RDF in plain-text_]]

---+++ Example: RDF output using overrides from a custom skin
=SemanticLinksPlugin::System.SemanticIsPartOf::LinkWithText= used from the =templates/view.semanticlinksplugindcdemo.tmpl= file
<!-- %STARTSECTION{"dcdemo"}%[[System.SemanticIsPartOf::System.UserDocumentationCategory][User documentation]]%ENDSECTION{"dcdemo"}% -->
<verbatim class="tml">[[System.SemanticIsPartOf::System.UserDocumentationCategory][User documentation]]</verbatim>
Previews:
   * Best viewed in Firefox:
      * [[%TOPIC%?contenttype=application/xml+rdf;skin=semanticlinksplugindcdemo;section=dcdemo][_Click to see RDF view_]]
   * Alternate:
      * [[%TOPIC%?contenttype=text/plain;skin=semanticlinksplugindcdemo;section=dcdemo][_Click to see RDF in plain-text_]]
If you were to pass the resulting RDF to [[http://www.w3.org/RDF/Validator/]], it should be able to plot a graph with the generated RDF similar to:
<img alt="RDF graph of properties for !%TOPIC% topic" src="%ATTACHURLPATH%/dcdemo.png" width="941px" height="347px"/>

---++ Special properties of property topics

Property topics may themselves have semantic links on them ("meta-properties") to further refine their behaviour when these properties are used.

---+++ !SemanticLinksPlugin_DEFAULTWEB

This meta-property (property of the _property_ topic) specifies a default web context which is used when the _value_ part of the semantic link only contains a topic name without any web prefix (i.e. is not a fully-qualified topic address).

Consider a property topic named Cite, which is used to cite a bibliography reference topic in some text which refers to it. The user types:
<verbatim class="tml">[[Cite::Duke2006b]]</verbatim>

This will only work if the bibliography topic !Duke2006b exists in the same web as the topic making the reference. However, it's usually desirable to have a dedicated web for holding bibliography topics, but then the user would have to type:
<verbatim class="tml">[[Cite::MyProject/Bibliography.Duke2006b]]</verbatim>

This can be solved by adding a !SemanticLinksPlugin_DEFAULTWEB meta-property on the Cite topic, as follows:
<verbatim class="tml">[[SemanticLinksPlugin_DEFAULTWEB::MyProject/Bibliography]]</verbatim>

With this in place, bibliography topics can exist in a dedicated subweb, and the user can still write <verbatim class="tml">[[Cite::Duke2006b]]</verbatim> to access them.

---++ Meta Data
<verbatim class="tml">Frogs [[Eat::Flies][eat flies]], [[Eat::Mosquitos][mosquitos]]
and are [[PreyOf::Snakes][preyed on by snakes]].</verbatim> on save, gives:
<verbatim class="tml">
 %META:SLPROPERTY{name="Eat"    num="2"}%
 %META:SLVALUE{   name="Eat__2"      property="Eat"      propertyaddress="System.Eat"      propertyseq="2" propertyweb="System" value="Mosquitos" valueaddress="System.Mosquitos" valuetopic="Mosquitos" valueweb="System"}%
 %META:SLVALUE{   name="Eat__1"      property="Eat"      propertyaddress="System.Eat"      propertyseq="2" propertyweb="System" value="Flies"     valueaddress="System.Flies"     valuetopic="Flies"     valueweb="System"}%
 %META:SLPROPERTY{name="PreyOf" num="1"}%
 %META:SLVALUE{   name="PreyOf__1"   property="PreyOf"   propertyaddress="System.PreyOf"   propertyseq="1" propertyweb="System" value="Snakes"    valueaddress="System.Snakes"    valuetopic="Snakes"    valueweb="System"}%
 %META:SLVALUE{   name="IsPartOf__1" property="IsPartOf" propertyaddress="System.IsPartOf" propertyseq="1" propertyweb="System" value="UserDocumentationCategory" valueaddress="System.UserDocumentationCategory" valuetopic="UserDocumentationCategory" valueweb="System"}%</verbatim>

A complete list of properties on a given topic may be obtained using:
<verbatim class="tml">%QUERY{"slproperties.name"}%</verbatim>
Preview:
<blockquote>%QUERY{"slproperties.name"}%</blockquote>

A complete list of values for a given property may be obtained using:
<verbatim class="tml">%QUERY{"slvalues[property='Eat'].value"}%</verbatim>
Preview:
<blockquote>%QUERY{"slvalues[property='Eat'].value"}%</blockquote>

And all values of all properties on the current topic could be rendered using:
<verbatim class="tml">%FORMAT{
  "%QUERY{"slproperties.name"}%"
  type="string"
  format="$percentFORMAT{
    \"$percentQUERY{\"slvalues[property='$item'].value\"}$percent\"
    type=\"topic\"
    header=\"   * $item$n\"
    format=\"      * [[$dollarweb.$dollartopic][$dollartopic]] created $dollarcreatedate\"
  }$percent"
}%</verbatim>

*Preview:*
%FORMAT{
  "%QUERY{"slproperties.name"}%"
  type="string"
  format="$percentFORMAT{
    \"$percentQUERY{\"slvalues[property='$item'].value\"}$percent\"
    type=\"topic\"
    header=\"   * $item$n\"
    format=\"      * [[$dollarweb.$dollartopic][$dollartopic]] created $dollarcreatedate\"
  }$percent"
}%

<!--%JQREQUIRE{"chili"}%
One line description, required for extensions repository catalog.
   * Set SHORTDESCRIPTION = %$SHORTDESCRIPTION%
-->

#RestScript
---++ REST Script (updating topics)
If you had content using a 1.x version of %TOPIC%, or you've added semantic links "off line" by modifying your Foswiki installation's topic.txt files externally, you may use the =rest= script to re-save topics making use of semantic links across one or more webs. The available options are:
   * =updateweb= - the web to update. =all= updates all webs.
   * =updatetopic= - the topic to update. If omitted, updates all topics.
   * =recurse= - on or off. Recurse into subwebs.

---+++ REST script via web browser
The URL to use is of the form: [[%SCRIPTURLPATH{"rest"}%/%TOPIC%/reparse?updateweb=%SYSTEMWEB%]]

---+++ REST script via command line
It may be unreasonable to run the rest script via web browser if you have any non-trivial amount of data, so on a
production system it's best to invoke the rest script from the command line where the process won't be affected by
timemouts and webserver restarts. The following examples assume:
   * Your web server user is =www-data= (default on Debian systems)
   * The path to the root of your Foswiki installation is =/path/to/foswiki=

%JQREQUIRE{"chili"}%<verbatim class="bash">cd /path/to/foswiki
sudo -u www-data bin/./rest /SemanticLinksPlugin/reparse -updateweb System</verbatim>

---++ TODO
   * The example templates are kind of lame...
   * Ship with an interesting set of example topics
   * Ship an example that abuses the templating feature to do interesting linked-data ajax things with semantic links, Eg. =[<nop>[ISBN::2134567]]= could have a template in the ISBN property topic which renders some specially styled =&lt;span&gt;= tag to enable some jquery code to go out and resolve the ISBN into publisher, author, book title... in the browser.

---++ Known Issues
   * For now, values are expected to be internal links to other topics
   * Sanitisation of property/value?
   * No attempt to support Semantic !MediaWiki's ={{#set ....}}= syntax at this point
   * =[<nop>[Foo::Bar|label]]= isn't understood by WysiwygPlugin, so the syntax breaks TML tables

---++ Installation

%$INSTALL_INSTRUCTIONS%

---++ Plugin Info

|  Author: | Foswiki:Main.PaulHarvey |
|  Copyright: | &copy; 2010-2011, [[http://www.taxonomy.org.au][Taxonomy Research & Information Network]], Foswiki Contributors |
|  License: | GPL ([[http://www.gnu.org/copyleft/gpl.html][GNU General Public License]]) |
|  Release: | %$RELEASE% |
|  Version: | %$VERSION% |
|  Change History:     | <!-- versions below in reverse order --> |
|  17 Jun 2011 (2.1.1) | Foswikitask:Item10887 - Fix incorrect propertyseq values |
|  16 Jun 2011 (2.1.0) | Foswikitask:Item10884 - Implement a 'meta-property' for property topics to control default web context on links only containing a topic name %BR%\
                         - %X% Removed =META:SLPROPERTY.values= key. Query =META:SLVALUE.value= instead. %BR% \
                         - %X% Renamed =META:SLVALUE.anchor= key to =META:SLVALUE.fragment=. %BR% \
                         - %X% Removed =META:SLVALUE.query= and =META:SLVALUE.text= keys. %BR% \
                         - %X% =META:SLPROPERTY.name= key is now always the topic part only. Web prefixes are stripped. %BR%\
                         - Added =valueweb=, =valuetopic=, =valueaddress=, =propertyweb=, =propertytopic=, =propertyaddress= keys to =META:SLVALUE= type. |
|  10 May 2011 (2.0.1) | Foswikitask:Item9961 - Implement =$property(seq)= token & documented |
|  07 May 2011 (2.0.0) | Foswikitask:Item9961 - %X% __Breaking compatibility__ %BR% \
                         - %X% Deleted =META:SLPROPERTIES=. Use =%<nop>QUERY{"slproperties.name"}%= for a list of property names %BR% \
                         - %X% Renamed =META:SLPROPERTYVALUE= to =META:SLVALUE=. Use the [[#RestScript][rest script]] to update your topics. %BR% \
                         - %X% Renamed =slpropertyvalue= and =slproperty= to =slvalues= and =slproperties=. You will need to re-write your queries! %BR% \
                         - Changed template tokens from =$valuefoo= to =$value(foo)= format %BR% \
                         - Added =META:LINK= metadata to allow QuerySearch of topic backlinks %BR% \
                         - Added a [[#RestScript][rest script]] to support bulk updating topics with backlink =META= and the new =META:SL...= schema |
|  06 May 2011 (1.2.0) | Foswikitask:Item9961 - Fix always saving an SLPROPERTIES even when no semantic links present; re-work token parser |
|  06 Jan 2011 (1.1.0) | Foswikitask:Item9961 - Rename SEMANTICLINKSPLUGIN_ENABLED to SEMANTICLINKSPLUGIN_RENDER; default to on |
|  05 Nov 2010 (1.0.3) | Foswikitask:Item9948 - Fix registerMETA bug, QUERY examples; fix template bug |
|  03 Nov 2010 (1.0.0) | Foswikitask:Item9897 - Initial version |
|  Home: | http://foswiki.org/Extensions/%TOPIC% |
|  Support: | http://foswiki.org/Support/%TOPIC% |

%META:LINK{name="19" address="System.WebPreferences" scope="internal" topic="WebPreferences" type="autolink" web="System"}%
%META:LINK{name="18" address="Main.SitePreferences" scope="internal" topic="SitePreferences" type="autolink" web="Main"}%
%META:LINK{name="24" address="System.AutoViewTemplatePlugin" scope="internal" topic="AutoViewTemplatePlugin" type="autolink" web="System"}%
%META:LINK{name="20" address="System.QuerySearch" scope="internal" topic="QuerySearch" type="autolink" web="System"}%
%META:LINK{name="3" address="System.SemanticIsPartOf" scope="internal" topic="SemanticIsPartOf" type="bracket" web="System"}%
%META:LINK{name="16" address="http://foswiki.org/Support/SemanticLinksPlugin" scope="external" type="autolink"}%
%META:LINK{name="11" address="System.SemanticLinksPlugin" scope="internal" topic="SemanticLinksPlugin" type="bracket" web="System"}%
%META:LINK{name="4" address="http://www.w3.org/RDF/Validator/" scope="external" type="bracket"}%
%META:LINK{name="10" address="System.VarURLPARAM" scope="internal" topic="VarURLPARAM" type="bracket" web="System"}%
%META:LINK{name="25" address="System.WysiwygPlugin" scope="internal" topic="WysiwygPlugin" type="autolink" web="System"}%
%META:LINK{name="15" address="http://www.gnu.org/copyleft/gpl.html" scope="external" type="bracket"}%
%META:LINK{name="1" address="System.PreferenceSettings" scope="internal" topic="PreferenceSettings" type="bracket" web="System"}%
%META:LINK{name="2" address="System.Macros" scope="internal" topic="Macros" type="bracket" web="System"}%
%META:LINK{name="12" address="$dollarweb.$dollartopic" scope="internal" topic="$dollartopic" type="bracket" web="$dollarweb"}%
%META:LINK{name="21" address="System.MetaData" scope="internal" topic="MetaData" type="autolink" web="System"}%
%META:LINK{name="17" address="http://foswiki.org/Extensions/SemanticLinksPlugin" scope="external" type="autolink"}%
%META:LINK{name="23" address="System.ACRONYM" scope="internal" topic="ACRONYM" type="autolink" web="System"}%
%META:LINK{name="22" address="System.WikiWords" scope="internal" topic="WikiWords" type="autolink" web="System"}%
%META:LINK{name="6" address="System.IsPartOf::UserDocumentationCategory|docs" scope="internal" topic="IsPartOf::UserDocumentationCategory|docs" type="bracket" web="System"}%
%META:LINK{name="5" address="System.IsPartOf::UserDocumentationCategory" scope="internal" topic="IsPartOf::UserDocumentationCategory" type="bracket" web="System"}%
%META:LINK{name="14" address="http://www.taxonomy.org.au" scope="external" type="bracket"}%
%META:LINK{name="8" address="System.IsPartOf" scope="internal" topic="IsPartOf" type="bracket" web="System"}%
%META:LINK{name="7" address="System.IsPartOf::UserDocumentationCategory|docs::misc" scope="internal" topic="IsPartOf::UserDocumentationCategory|docs::misc" type="bracket" web="System"}%
%META:LINK{name="9" address="System.SkinTemplates" scope="internal" topic="SkinTemplates" type="bracket" web="System"}%
%META:LINK{name="13" address="%25SCRIPTURLPATH%7b%22rest%22%7d%25/SemanticLinksPlugin.reparse" scope="internal" topic="reparse" type="bracket" web="%25SCRIPTURLPATH%7b%22rest%22%7d%25/SemanticLinksPlugin"}%
%META:SLPROPERTY{name="System.SemanticIsPartOf" num="1" values="System.UserDocumentationCategory"}%
%META:SLPROPERTY{name="Example.Property" num="1" values="UserDocumentationCategory"}%
%META:SLPROPERTY{name="Eat" num="2" values="Mosquitos,Flies"}%
%META:SLPROPERTY{name="PreyOf" num="1" values="Snakes"}%
%META:SLPROPERTY{name="IsPartOf" num="1" values="UserDocumentationCategory"}%
%META:SLPROPERTY{name="SemanticIsPartOf" num="1" values="UserDocumentationCategory"}%
%META:SLVALUE{name="System.SemanticIsPartOf__1" anchor="anchor" property="System.SemanticIsPartOf" propertyseq="1" query="query=something" text="User documentation" value="System.UserDocumentationCategory"}%
%META:SLVALUE{name="Example.Property__1" anchor="AnchorPart" property="Example.Property" propertyseq="1" query="query=part" text="Example text" value="UserDocumentationCategory"}%
%META:SLVALUE{name="Eat__2" property="Eat" propertyseq="2" text="mosquitos" value="Mosquitos"}%
%META:SLVALUE{name="Eat__1" property="Eat" propertyseq="1" text="eat flies" value="Flies"}%
%META:SLVALUE{name="PreyOf__1" property="PreyOf" propertyseq="1" text="preyed on by snakes" value="Snakes"}%
%META:SLVALUE{name="IsPartOf__1" property="IsPartOf" propertyseq="1" text="docs::misc" value="UserDocumentationCategory"}%
%META:SLVALUE{name="SemanticIsPartOf__1" anchor="anchor" property="SemanticIsPartOf" propertyseq="1" query="query=something" text="Example text" value="UserDocumentationCategory"}%
